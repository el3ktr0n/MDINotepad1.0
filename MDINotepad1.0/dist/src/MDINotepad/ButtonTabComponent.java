/*
 @(#)ButtonTabComponent.java	04-10-2011
 */
package MDINotepad;

import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.awt.event.*;
import javax.swing.undo.UndoManager;

/**
 * @author Dhruva Bhaswar
 */
public class ButtonTabComponent  extends JPanel{//class to add close button to each tab of JTabbedPane
    private final JTabbedPane pane;//to contain the reference of the JTabbedPane originally added to main JFrame
    private TextEditor te;//to contain the reference of the main JFrame
    public ButtonTabComponent(final JTabbedPane pane,TextEditor te) {
        //unset default FlowLayout' gaps
        super(new FlowLayout(FlowLayout.LEFT, 0, 0));
        this.te=te;
        if (pane == null) {
            throw new NullPointerException("TabbedPane is null");
        }
        this.pane = pane;
        setOpaque(false);
        
        //make JLabel read titles from JTabbedPane
        JLabel label = new JLabel() {
            @Override
            public String getText() {
                int i = pane.indexOfTabComponent(ButtonTabComponent.this);
                if (i != -1) {
                    return pane.getTitleAt(i);
                }
                return null;
            }
        };
        
        add(label);
        //add more space between the label and the button
        label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
        //tab button
        JButton button = new TabButton();
        add(button);
        //add more space to the top of the component
        setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
    }

    private class TabButton extends JButton implements ActionListener {
        public TabButton() {
            int size = 17;
            setPreferredSize(new Dimension(size, size));
            setToolTipText("close this tab");
            //Make the button look the same always
            setUI(new BasicButtonUI());
            //Make it transparent
            setContentAreaFilled(false);
            //No need to be focusable
            setFocusable(false);
            setBorder(BorderFactory.createEtchedBorder());
            setBorderPainted(false);
            //Making nice rollover effect
            //we use the same listener for all buttons
            addMouseListener(buttonMouseListener);
            setRolloverEnabled(true);
            //Close the proper tab by clicking the button
            addActionListener(this);//registers the button to ActionListener to handle Action Events
        }
        
        /**
         * event handling corresponding to ActionEvent
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            int i = pane.indexOfTabComponent(ButtonTabComponent.this);
            if (i != -1) {
                te.modified=Boolean.parseBoolean(te.modifiedVec.get(i).toString());
                te.currentFile=pane.getTitleAt(i);
                if(te.savePrev()){//saves the documents being closed depending upon user's choice to save or not
                    pane.remove(i);
                              //removes the current tab from the JTabbedPane
                    te.modifiedVec.remove(i);
                }
                if(te.tp.getTabCount()==0){
                    te.createEditor();
                    te.currentFile="Untitled";
                    te.modified=false;
                    te.save.setEnabled(false);
                    te.saveAs.setEnabled(false);
                    te.currentEP.setText("");
                
                    te.m_undo=new UndoManager();
               
                    te.initTabComponent(te.tp.getTabCount()-1);
                }//this block makes sure that there is always one tab open in the editor
                //if all other tabs are closed we have untitled one still present
                
            }
        }

        //we don't want to update UI for this button
        @Override
        public void updateUI() {
        }

        //paint the cross
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g.create();
            //shift the image for pressed buttons
            if (getModel().isPressed()) {
                g2.translate(1, 1);
            }
            g2.setStroke(new BasicStroke(2));
            g2.setColor(Color.BLACK);
            if (getModel().isRollover()) {
                g2.setColor(Color.MAGENTA);
            }
            int delta = 6;
            g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
            g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
            g2.dispose();
        }
    }
    
    /**
     * buttonMouseListener an instance of MouseAdapter class to handle Mouse Events generated by the button
     */
    private final static MouseListener buttonMouseListener = new MouseAdapter() {
        
        /**
         * when mouse pointer hovers over the button,the following event handling gives it a highlighting effect
         */
        @Override
        public void mouseEntered(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractButton) {
                AbstractButton button = (AbstractButton) component;
                button.setBorderPainted(true);
            }
        }
        
        /**
         * when the mouse pointer is taken away,
         * the following block causes the button to regain its original appearance
         */
        @Override
        public void mouseExited(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractButton) {
                AbstractButton button = (AbstractButton) component;
                button.setBorderPainted(false);
            }
        }
    };
}
